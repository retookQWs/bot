#–ù–ï–û–ë–•–û–î–ò–ú–´–ï –ë–ò–ë–ò–õ–ò–û–¢–ï–ö–ò
# !pip install PyPDF2
# !pip install pytesseract
# !apt install tesseract-ocr
# !apt install tesseract-ocr-rus
# # !pip install easyocr
# !pip install  pdf2image
# !apt-get install poppler-utils
# !pip install paddlepaddle
# !pip install paddleocr
# !pip install IPython
# !pip install  telebot

import pytesseract

import os
import re
import cv2
import numpy as np
from PyPDF2 import PdfReader, PdfWriter
from pdf2image import convert_from_path
from PIL import Image
from IPython.display import display
from paddleocr import PaddleOCR, draw_ocr
import telebot
# pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

folder_path = 'output'
ocr = PaddleOCR(use_angle_cls=False, lang='en')
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ—ë
if not os.path.exists(folder_path):
    os.makedirs(folder_path)
else:
    print("–ü–∞–ø–∫–∞ 'output' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

bot = telebot.TeleBot("622034566:AAHE5mrR9Rpu1p4daxp1-4desy7iaf9W_k8")

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—Å–∫–∞–Ω–æ–≤.\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ.\n"
        "2. –†–∞–∑–æ–±—å—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É '–ê–∫—Ç...‚Ññ....'\n"
        "3. –û—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.\n"
        "–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–Ω–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–º–æ—â—å.\n"

    )
    bot.send_message(message.chat.id, help_text)



@bot.message_handler(content_types=['document'])

def handle_document(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Ç–∏–ø–∞ PDF
    if message.document.mime_type == 'application/pdf':
        # –°–∫–∞—á–∏–≤–∞–µ–º PDF-—Ñ–∞–π–ª
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF-—Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        with open("downloaded_pdf.pdf", 'wb') as new_file:
            new_file.write(downloaded_file)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        bot.send_message(message.chat.id, "PDF-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        clear_directory(directory_to_clear)
        main("downloaded_pdf.pdf", message)  # –ü–µ—Ä–µ–¥–∞–µ–º message –≤ main
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")

def clear_directory(directory):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    files = os.listdir(directory)
    # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    for file in files:
        file_path = os.path.join(directory, file)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª, –∞ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if os.path.isfile(file_path):
            os.remove(file_path)

directory_to_clear = 'output'

def extract_identifier(image, image2):
    text = pytesseract.image_to_string(image, lang='rus')



    print(text)



    match = re.search(r'–ê–∫—Ç.*?–ø—Ä–∏.', text)
    if match:
        print(text)
        new_st = re.sub(r'^9', '', re.search(r'\d+', text).group())
        return new_st # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏—Ñ—Ä
    else:
        if has_blue_pixels(image2): #–µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–Ω–∏–π —Ü–≤–µ—Ç —Ç–æ..
            result = ocr.ocr("cropped_image2.jpg")
            if result[0] is not None:
                txt2 = '\n'.join([line[1][0] for line in result[0]])
                print(result)
                print(txt2)
                txt3 = max(txt2.split(), key=len)
                print(txt3)
                return txt3
            else:
                print("result[0] is None, cannot iterate.")

            # match = re.search(r'\d+', text)
            # print(text)
            # return match.group()
        else:
            match = re.search(r'–Ω–∏–≤–µ—Ä—Å–∞–ª.*?—Ñ–∞–∫—Ç—É—Ä.', text)
            if match:
                match = re.search(r'\d+', text)
                print('–£–ü–î_' + match.group())
                return '–£–ü–î_' + match.group()

        return None

def main(pdf_path, message):
    os.makedirs("output", exist_ok=True)
    current_identifier = None
    current_pdf_writer = None
    files_sent = 0  # –°—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    pdf_reader = PdfReader(open(pdf_path, "rb"))

    for page_num in range(len(pdf_reader.pages)):
        images = convert_from_path(pdf_path, first_page=page_num+1, last_page=page_num+1)
        image = images[0]

        width, height = image.size
        cropped_height = int(height * 0.12)
        cropped_image = image.crop((0, int(height * 0.04), int(width * 0.8), cropped_height))
        cropped_image2 = image.crop((int(width * 0.94), 0, width, int(height * 0.4)))
        cropped_image2r = cropped_image2.rotate(90, expand=True)
        cropped_image.save("cropped_image.jpg")
        cropped_image2r.save("cropped_image2.jpg")

        display(cropped_image)
        display(cropped_image2r)

        identifier = extract_identifier(cropped_image, cropped_image2)

        if identifier:
            if current_pdf_writer:
                output_pdf_path = f"output/{current_identifier}.pdf"
                with open(output_pdf_path, "wb") as output_pdf:
                    current_pdf_writer.write(output_pdf)
                send_file(output_pdf_path, message)
                files_sent += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

            current_pdf_writer = PdfWriter()
            current_pdf_writer.add_page(pdf_reader.pages[page_num])
            current_identifier = identifier
        else:
            if current_pdf_writer:
                current_pdf_writer.add_page(pdf_reader.pages[page_num])

    if current_pdf_writer:
        output_pdf_path = f"output/{current_identifier}.pdf"
        with open(output_pdf_path, "wb") as output_pdf:
            current_pdf_writer.write(output_pdf)
        send_file(output_pdf_path, message)
        files_sent += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_sent}		")

def send_file(file_path, message):
    with open(file_path, 'rb') as f:
        bot.send_document(message.chat.id, f)
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_message(message.chat.id, "–∂–¥—É –≤–∞—à–∏—Ö —Å–∫–∞–Ω–æ–≤ üòä")


def has_blue_pixels(image_path, threshold=50):
    img = image_path
    width, height = img.size
    pixels = img.load()

    for x in range(width):
        for y in range(height):
            r, g, b = pixels[x, y]
            if b > threshold and b > r and b > g:
                return True
    return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# image_path = '/content/–°–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞ 2024-06-14 022804.jpg'
# if has_blue_pixels(image_path):
#     print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏")
# else:
#     print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏")
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö


bot.polling(none_stop=True, interval=0)


